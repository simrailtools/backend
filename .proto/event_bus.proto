syntax = "proto3";
package tools.simrail.backend;

option java_multiple_files = true;
option java_outer_classname = "EventBusProto";
option java_package = "tools.simrail.backend.common.rpc";

import "google/protobuf/empty.proto";

// The types of updates that can be sent out.
enum UpdateType {
  // The monitored object was added.
  ADD = 0;
  // The monitored object was removed.
  REMOVE = 1;
  // The monitored object was updated.
  UPDATE = 2;
}

// A geo position.
message GeoPosition {
  // The latitude of the geo position.
  double latitude = 1;
  // The longitude of the geo position.
  double longitude = 2;
}

// Information about the next signal of a journey.
message SignalInfo {
  // The name (id) of the signal.
  string name = 1;
  // The distance (in meters) of the journey to the signal.
  uint32 distance = 2;
  // The maximum allowed speed shown by the signal, null if the signal does not indicate a speed reduction.
  optional uint32 max_speed = 3;
}

// A wrapper to indicate if the driver steam id of a journey was changed, and if that is the case to which new value.
message SteamIdWrapper {
  // Indicates if the steam id was updated.
  bool updated = 1;
  // The new steam id, only present if updated is true. Can be null to indicate that no player is driving.
  optional string steam_id = 2;
}

// A wrapper to indicate if the next signal of a journey was changed and to which new value.
message SignalInfoWrapper {
  // Indicates if the signal info was updated.
  bool updated = 1;
  // The new signal info if updated is true. Can be null in case the signal is too far away (>5 km).
  optional SignalInfo signal_info = 2;
}

// A single update frame for a single journey holding all fields that can be updated.
message JourneyUpdateFrame {
  // The id of the journey that is being updated.
  string journey_id = 1;
  // The id of the server where the journey happens.
  string server_id = 2;
  // The type of update that is signalled by this frame.
  UpdateType update_type = 3;

  // A wrapper to indicate if the driver of a journey changed.
  SteamIdWrapper driver = 4;
  // A wrapper to indicate if the next signal of a journey changed.
  SignalInfoWrapper next_signal = 5;

  // The speed that the journey is travelling at, not present if the speed didn't change.
  optional uint32 speed = 6;
  // The current position of the journey, not present if the position didn't change.
  optional GeoPosition position = 7;

  // Indicates if one event along the journey route was updated.
  bool event_updated = 8;
}

// A single update frame for a single server holding all fields that can be updated.
message ServerUpdateFrame {
  // The id of the server that is being updated.
  string server_id = 1;
  // The type of update that is signalled by this frame.
  UpdateType update_type = 2;

  // Indicates if the server is online or offline, not given in case the online state didn't update.
  optional bool online = 3;
  // The timezone offset of the server, not given in case the timezone didn't change.
  optional string zone_offset = 5;
  // The utc offset of the server in hours, not given in case the offset didn't change.
  optional sint32 utc_offset_hours = 6;
}

// A single update frame for a single dispatch post holding all fields that can be updated.
message DispatchPostUpdateFrame {
  // The id of the dispatch post that is being updated.
  string post_id = 1;
  // The id of the server on which the posit is located.
  string server_id = 2;
  // The type of update that is signalled by this frame.
  UpdateType update_type = 3;

  // The steam ids of the dispatcher at the post, empty if the dispatchers did not change.
  repeated string dispatcher_steam_ids = 4;
}

// An event bus which streams updates of objects to a client.
service EventBus {
  // Subscribes the client to all journey updates that are available to the server.
  rpc SubscribeToJourneys(google.protobuf.Empty) returns (stream JourneyUpdateFrame);

  // Subscribes the client to all server updates that are available to the server.
  rpc SubscribeToServers(google.protobuf.Empty) returns (stream ServerUpdateFrame);

  // Subscribes the client to all dispatch post updates that are available to the server.
  rpc SubscribeToDispatchPosts(google.protobuf.Empty) returns (stream DispatchPostUpdateFrame);
}
